{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","ALL","value","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","completed","title","ACTIVE","toLowerCase","includes","COMPLETED","length","className","map","id","classNames","onClick","currentTodoActions","setTodo","TodoFilter","onSubmit","event","preventDefault","onChange","target","filterActions","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isOpen","setIsOpen","loadUsers","a","userId","usersFromServer","useEffect","href","email","name","App","React","isLoading","setIsLoading","loadTodos","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd71031f.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype QueryAction = {\n  type: 'filter/QUERY';\n  payload: string;\n};\n\ntype StatusAction = {\n  type: 'filter/STATUS';\n  payload: Status;\n};\n\ntype Action = QueryAction | StatusAction;\n\nconst query = (payload: string): QueryAction => ({\n  type: 'filter/QUERY',\n  payload,\n});\n\nconst status = (value: Status): StatusAction => ({\n  type: 'filter/STATUS',\n  payload: value,\n});\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: Status.ALL,\n};\n\nexport const actions = { query, status };\n\nconst filterReducer = (filter: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return { ...filter, query: action.payload };\n    case 'filter/STATUS':\n      return { ...filter, status: action.payload };\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodoAction = {\n  type: 'todos/ADD';\n  payload: Todo[];\n};\n\nconst add = (todos: Todo[]): AddTodoAction => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { add };\n\nconst todosReducer = (todos: Todo[] = [], action: AddTodoAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector((state) => state.todos);\n  const status = useAppSelector((state) => state.filter.status);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const query = useAppSelector((state) => state.filter.query);\n\n  const setTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const removeTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  const filteredTodos = todos.filter(({ completed, title }) => {\n    switch (status) {\n      case Status.ACTIVE:\n        return !completed && title.toLowerCase().includes(query.toLowerCase());\n      case Status.COMPLETED:\n        return completed && title.toLowerCase().includes(query.toLowerCase());\n      case Status.ALL:\n      default:\n        return title.toLowerCase().includes(query.toLowerCase());\n    }\n  });\n\n  return (\n    <>\n\n      {(filteredTodos.length === 0) && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredTodos.map((todo) => (\n            <tr\n              key={todo.id}\n              data-cy=\"todo\"\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames(\n                    'has-text-success',\n                    {\n                      'has-text-danger': !todo.completed,\n                    },\n                  )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                {currentTodo?.id === todo.id\n                  ? (\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button is-link\"\n                      type=\"button\"\n                      onClick={() => {\n                        removeTodo();\n                      }}\n                    >\n                      <span className=\"icon\">\n                        <i className=\"far fa-eye-slash\" />\n                      </span>\n                    </button>\n                  ) : (\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => {\n                        setTodo(todo);\n                      }}\n                    >\n                      <span className=\"icon\">\n                        <i className=\"far fa-eye\" />\n                      </span>\n                    </button>\n                  )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const status = useAppSelector((state) => state.filter.status);\n  const query = useAppSelector((state) => state.filter.query);\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (event.target.value) {\n      case Status.ACTIVE:\n        return dispatch(filterActions.status(Status.ACTIVE));\n      case Status.COMPLETED:\n        return dispatch(filterActions.status(Status.COMPLETED));\n      case Status.ALL:\n        return dispatch(filterActions.status(Status.ALL));\n      default:\n        return dispatch(filterActions.status(Status.ALL));\n    }\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    return dispatch(filterActions.query(event.target.value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.query(''))}\n              aria-label=\"Clear search\"\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isOpen, setIsOpen] = useState(true);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const removeTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  const loadUsers = async () => {\n    if (currentTodo) {\n      const usersFromServer = await getUser(currentTodo.userId);\n\n      setUser(usersFromServer);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              aria-label=\"delete\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setIsOpen(false);\n                removeTodo();\n              }}\n            />\n\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames(\n                'has-text-success',\n                {\n                  'has-text-danger': !currentTodo?.completed,\n                },\n              )}\n              >\n                {\n                  currentTodo?.completed\n                    ? 'Done'\n                    : 'Planned'\n                }\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport function checkQuery(query:string, content:string) {\n  return (content.toLowerCase())\n    .includes(query.toLowerCase());\n}\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  const loadTodos = async () => {\n    const todosFromServer = await getTodos();\n\n    setIsLoading(true);\n    dispatch(actions.add(todosFromServer));\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {\n                !isLoading\n                  ? <Loader />\n                  : (\n                    <TodoList />\n                  )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}